param(
    [Parameter(Mandatory,
        HelpMessage = "Set the path of the sdk code generated by autorest.csharp")]
    [string]
    $CsharpSdkPath,

    [Parameter(Mandatory,
        HelpMessage = "Set the path of the sdk code generated by autorest.powershell")]
    [switch]$PowerShellSdkPath
)

class DifferentFunctions {
    [string]$CsharpFunction
    [string]$PowerShellFunction
    [string]$FileName
}

function CompareSingleSdkFile {
    param (
        [string]
        $CsharpFilePath,

        [string]
        $PowerShellFilePath
    )
    $result = New-Object -TypeName 'System.Collections.ArrayList';
    $fileName = Split-Path -Path $CsharpFilePath -Leaf
    $validCsharpContent = ((Get-Content -Path $CsharpFilePath) | ForEach-Object { ($_ -replace "\s+", "") } `
        | Where-Object { (($_ -notlike "*//*") -and ($_ -ne "") -and ($_ -ne '{') -and ($_ -ne '}') -and ($_ -ne '};')) })

    $validPowerShellContent = ((Get-Content -Path $PowerShellFilePath) | ForEach-Object { ($_ -replace "\s+", "") } `
        | Where-Object { (($_ -notlike "*//*") -and ($_ -ne "") -and ($_ -ne '{') -and ($_ -ne '}') -and ($_ -ne '};')) })
    
    foreach ($csharpContent in $validCsharpContent) {
        if ($validPowerShellContent -notcontains $csharpContent) {
            $element = [DifferentFunctions]::new();
            $element.CsharpFunction = $csharpContent;
            $element.PowerShellFunction = $csharpContent;
            $element.FileName = $fileName;
            $result.Add($element);
        }
    }

    return $result

}

function CompareTestSdkCode { 
    param (
        [TestSdkModel]
        $TestSdk,
        
        [System.Collections.ArrayList]
        $result
    )


    $csharpFiles = Get-ChildItem -Path $TestSdk.CsharpSdkFolder -Recurse -File -Exclude $ignoreFiles
    $powershellFiles = Get-ChildItem -Path $TestSdk.PowerShellSdkFolder -Recurse -File -Exclude $ignoreFiles

    # Get files that exist in csharp and powershell
    $existCsharpFiles = $csharpFiles | Where-Object { $powershellFiles.Name -contains $_.Name }

    foreach ($existFile in $existCsharpFiles) {
        $powershellFile = $powershellFiles | Where-Object { $_.Name -eq $existFile.Name }
        $fileCompareResult = CompareSingleSdkFile -CsharpFilePath $existFile.FullName -PowerShellFilePath $powershellFile.FullName
    }

    if ($isFileContentEqual) {
        $TestSdk.SdkComparedStatus = [ComparedStatus]::Equal
    }
    else {
        $TestSdk.SdkComparedStatus = [ComparedStatus]::NotEqual
    }

}

try {
    $csharpApiFiles = Get-ChildItem -Path $CsharpSdkPath -Recurse -File -Exclude Models
    $powershellApiFiles = Get-ChildItem -Path $PowerShellSdkPath -Recurse -File -Exclude Models

    $csharpModelFiles = Get-ChildItem -Path (Join-Path $CsharpSdkPath "Models") -Recurse -File
    $powershellModelFiles = Get-ChildItem -Path (Join-Path $PowerShellSdkPath "Models") -Recurse -File

    foreach ($test in $tests) {
        $testSdk = [TestSdkModel]::new()
        $testSdk.TestName = $test.Name
        $testSdk.CsharpGeneratedStatus = [GeneratedStatus]::Failed
        $testSdk.PowerShellGeneratedStatus = [GeneratedStatus]::Failed
        $testSdk.SdkComparedStatus = [ComparedStatus]::NotEqual
        $testSdk.CsharpSdkFolder = (Join-Path $test.FullName 'csharp')
        $testSdk.PowerShellSdkFolder = (Join-Path $test.FullName 'powershell')
        $testSdkSummary += $testSdk
    }
    
    foreach ($testSdk in $testSdkSummary) {
        Write-Host "test $($testSdk.TestName) testing...."
        GenerateSdkCode -TestSdk $testSdk
        CompareTestSdkCode -TestSdk $testSdk -ignoreFiles $ignoreCompareFiles
        $testSdk.Comment = ($testSdk.Result | Out-String)
        $testSdk | Select-Object -Property TestName, CsharpGeneratedStatus, PowerShellGeneratedStatus, SdkComparedStatus, Comment | Format-Table
    }
    if ($PSCmdlet.ParameterSetName -ne 'SingleTestCase' ) {
        Write-Host "Summary results as following"
        # Show summary test result
        $testSdkSummary | Select-Object -Property TestName, CsharpGeneratedStatus, PowerShellGeneratedStatus, SdkComparedStatus, Comment | Format-Table
    }
    if ($testSdkSummary.SdkComparedStatus -contains [ComparedStatus]::NotEqual) {
        throw 'The code generated by the autorest.powershell file is different from the code generated by the autorest.csharp.'
    }
    else {
        Write-Host 'All generated codes are the same'
    }
}
catch {
    Write-Error "An error occurred"
    Write-Error ($_ | Out-String)
}
finally {
    # Save test result to csv file
    if ($SaveResult) {
        $resultFilePath = Join-Path $compareResultFolder "autorest.powershell-sdk-compare-$((Get-Date).ToString('yyyyMMddHHmmss')).csv"
        Write-Host "The output result to the $resultFilePath"
        $testSdkSummary | Select-Object -Property TestName, CsharpGeneratedStatus, PowerShellGeneratedStatus, SdkComparedStatus, Comment | Export-Csv -Path  $resultFilePath -NoClobber
    }
}