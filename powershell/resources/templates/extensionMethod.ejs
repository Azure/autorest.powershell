<% var key = methodGroup.$key == 'Operations' ? '' : methodGroup.$key-%>
<%# ToDo: currently assume the SyncMethodsGenerationMode is Essential type, and need to add support for other types -%>
        /// <summary>
        /// <%=method.language.default.description%>
<%# ToDo: add support for externaldocsurl -%>
        /// </summary>
<%# ToDo: add <remarks> if there are both description and summary -%>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
<%  if(method.parameters) { method.parameters.filter(p => p.implementation != 'Client').forEach(function (parameter) {-%>
        /// <param name='<%-parameter.language.default.serializedName%>'>
        /// <%=parameter.language.default.description%>
        /// </param>
<% });}-%>
<%# ToDo: add support for GetObsoleteAttribute-%>
<%# ToDo: add support for AccessModifier, assume public for the time being-%>
        public static <%-method.language.default.returnType%> <%-method.language.default.name%>(this I<%-key%>Operations operations<%- method.language.default.syncMethodParameterDeclaration ? ', ' + method.language.default.syncMethodParameterDeclaration: '' %>)
        {
<%# ToDo: need to handle different return type, body, header and the others including no return type-%>
<% if(method.language.default.returnType != 'void') {-%>
                return ((I<%-key%>Operations)operations).<%-method.language.default.name%>Async(<%-method.language.default.syncMethodInvocationArgs%>).GetAwaiter().GetResult();
<% } else { -%>
                ((I<%-key%>Operations)operations).<%-method.language.default.name%>Async(<%-method.language.default.syncMethodInvocationArgs%>).GetAwaiter().GetResult();
<% } -%>
        }

        /// <summary>
        /// <%=method.language.default.description%>
<%# ToDo: add support for externaldocsurl -%>
        /// </summary>
<%# ToDo: add <remarks> if there are both description and summary -%>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
<%  if(method.language.default.parameters) { method.parameters.filter(p => p.implementation != 'Client').forEach(function (parameter) {-%>
        /// <param name='<%-parameter.language.default.serializedName%>'>
        /// <%=parameter.language.default.description%>
        /// </param>
<% });}-%>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
<%# ToDo: add support for GetObsoleteAttribute-%>
<%# ToDo: add support for AccessModifier, assume public for the time being-%>
        public static async System.Threading.Tasks.Task<%- method.language.default.returnType != 'void' ? '<' + key + '>' : ''%> <%-method.language.default.name%>Async(this I<%-key%>Operations operations<%- method.language.default.asyncMethodParameterDeclaration ? ', ' + method.language.default.asyncMethodParameterDeclaration: '' %>)
        {
<%# ToDo: need to handle different return type, body, header and the others including no return type-%>
<% if(method.language.default.returnType != 'void') {-%>
<%# ToDo: add support for primitive return-%>
            using (var _result = await operations.<%-method.language.default.name%>WithHttpMessagesAsync(<%-method.language.default.asyncMethodInvocationArgs%>).ConfigureAwait(false))
            {
                return _result.Body;
            }
<% } else { -%>
            (await operations.<%-method.language.default.name%>WithHttpMessagesAsync(<%-method.language.default.asyncMethodInvocationArgs%>).ConfigureAwait(false)).Dispose();
<% }-%>
        }