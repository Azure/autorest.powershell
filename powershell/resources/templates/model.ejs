<%- project.commentHeader %>

namespace <%- project.namespace %>.Models
{
    using System.Linq;

<%# ToDo: need to populate effectiveDocumentation in the model-%>
<% if (model.language.default.description) {-%>
    /// <summary>
    /// <%=model.language.default.description%>
    /// </summary>
<% }-%>
<% if (model.summary && model.language.default.description) { -%>
    /// <remarks>
    /// <%=model.language.default.description %>
    /// </remarks>
<% } -%>
<%# ToDo: support NeedsPolymorphicConverter-%>
<% if(project.helper.NeedsTransformationConverter(model)) {-%>
    [Microsoft.Rest.Serialization.JsonTransformation]
<% }-%>
<%# ToDo: support ObsoleteAttribute-%>
    public partial class <%-model.language.default.name%><%- model.parents && model.parents.immediate.length == 1 ? " : " + model.parents.immediate[0].language.default.name: ""%>
    {
        /// <summary>
        /// Initializes a new instance of the <%= model.language.default.name%> class.
        /// </summary>
        public <%- model.language.default.name%>()
        {
<%#ToDo support for object model that contains ContainsConstantProperties-%>
            CustomInit();
        }
<%#ToDo support for constructorParameters in the model, the constructorParameter is mapped to properties for the time being%>
<% if (model.properties || model.parents) {-%>
        /// <summary>
        /// Initializes a new instance of the <%=model.language.default.name%> class.
        /// </summary>
<%project.helper.GetAllPublicVirtualProperties(model.language.default.virtualProperties).forEach(function(p) {-%>
        /// <param name="<%-p.property.language.default.name%>"><%-p.property.language.default.description%></param>
<%});-%>
        public <%- model.language.default.name%>(<%-model.language.default.constructorParametersDeclaration%>)
<%# If there is only one direct parent, will implement it as parent%>
<%if (model.language.default.baseConstructorCall) {-%>
        : <%-model.language.default.baseConstructorCall%>
<%}-%>
        {
<%#ToDo support for InstanceProperties in the model, non const properties, priority 0-%>
<%project.helper.GetAllPublicVirtualPropertiesWithoutInherited(model.language.default.virtualProperties).forEach(function(p) {-%>
            this.<%-p.property.language.csharp.name%> = <%-p.property.language.default.name%>;
<%});-%>
            CustomInit();
        }
<% };-%>
<%#ToDo support for ClassProperties in the model, const properties-%>

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

<%#ToDo support for InstanceProperties in the model, non const properties, priority 0, line 407-%>
<% if (model.properties) { project.helper.GetAllPublicVirtualPropertiesWithoutInherited(model.language.default.virtualProperties).filter(p => p.property.schema.type != 'constant').forEach(function(p){-%>
        /// <summary>
        /// <%-p.property.language.csharp.formattedPropertySummary%>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "<%-p.serializedName%>")]
<% var type = p.property.schema.language.csharp.fullname-%>
<%type = p.property.schema.type == 'object' || type == 'string' ? type : type + '?'-%>
        public <%-type %> <%-p.property.language.csharp.name%> {get; <%- p.readOnly ? "private " : ""-%>set; }
<% });} -%>
<%#ToDo support for ClassProperties in the model, const properties -%>
<%#ToDo support for ShouldValidateChain-%>
<%#ToDo support for ShouldGenerateXmlSerialization, guess we do not need to support it-%>
    }
}