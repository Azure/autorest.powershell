// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Sample
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for EnvironmentsOperations.
    /// </summary>
    public static partial class EnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Create or update an environment in the specified subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the environment
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating an environment resource.
            /// </param>
            public static EnvironmentResource CreateOrUpdate(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, EnvironmentCreateOrUpdateParameters parameters)
            {
                return ((IEnvironmentsOperations)operations).CreateOrUpdateAsync(resourceGroupName, environmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an environment in the specified subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the environment
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating an environment resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<EnvironmentResource> CreateOrUpdateAsync(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, EnvironmentCreateOrUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the environment with the specified name in the specified subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// The name of the Time Series Insights environment associated with the
            /// specified resource group.
            /// </param>
            /// <param name='expand'>
            /// Setting expand=status will include the status of the internal services of
            /// the environment in the Time Series Insights service.
            /// </param>
            public static EnvironmentResource Get(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, string expand = default(string))
            {
                return ((IEnvironmentsOperations)operations).GetAsync(resourceGroupName, environmentName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the environment with the specified name in the specified subscription
            /// and resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// The name of the Time Series Insights environment associated with the
            /// specified resource group.
            /// </param>
            /// <param name='expand'>
            /// Setting expand=status will include the status of the internal services of
            /// the environment in the Time Series Insights service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<EnvironmentResource> GetAsync(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, environmentName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an environment in the specified subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the environment
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating an environment resource.
            /// </param>
            public static EnvironmentResource BeginCreateOrUpdate(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, EnvironmentCreateOrUpdateParameters parameters)
            {
                return ((IEnvironmentsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, environmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an environment in the specified subscription and resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='environmentName'>
            /// Name of the environment
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating an environment resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<EnvironmentResource> BeginCreateOrUpdateAsync(this IEnvironmentsOperations operations, string resourceGroupName, string environmentName, EnvironmentCreateOrUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, environmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
