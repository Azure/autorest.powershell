// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Sample.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters supplied to the Update Environment operation to update a
    /// long-term environment.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class LongTermEnvironmentUpdateParameters : EnvironmentUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// LongTermEnvironmentUpdateParameters class.
        /// </summary>
        public LongTermEnvironmentUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// LongTermEnvironmentUpdateParameters class.
        /// </summary>
        /// <param name="dataRetention">ISO8601 timespan specifying the number
        /// of days the environment's events will be available for query from
        /// the warm store.</param>
        /// <param name="tags">Key-value pairs of additional properties for the
        /// environment.</param>
        /// <param name="storageConfiguration">The storage configuration
        /// provides the connection details that allows the Time Series
        /// Insights service to connect to the customer storage account that is
        /// used to store the environment's data.</param>
        public LongTermEnvironmentUpdateParameters(string dataRetention, string tags = default(string), LongTermStorageConfigurationMutableProperties storageConfiguration = default(LongTermStorageConfigurationMutableProperties))
            : base(tags)
        {
            this.StorageConfiguration = storageConfiguration;
            this.DataRetention = dataRetention;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the storage configuration provides the connection
        /// details that allows the Time Series Insights service to connect to
        /// the customer storage account that is used to store the
        /// environment's data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageConfiguration")]
        public LongTermStorageConfigurationMutableProperties StorageConfiguration { get; set; }

        /// <summary>
        /// Gets or sets ISO8601 timespan specifying the number of days the
        /// environment's events will be available for query from the warm
        /// store.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.warmStoreConfiguration.dataRetention")]
        public string DataRetention { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DataRetention == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataRetention");
            }
            if (this.StorageConfiguration != null)
            {
                this.StorageConfiguration.Validate();
            }
        }
    }
}
