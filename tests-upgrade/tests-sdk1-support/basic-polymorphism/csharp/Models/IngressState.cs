// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Sample.Models
{

    /// <summary>
    /// Defines values for IngressState.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum IngressState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Disabled")]
        Disabled,
        [System.Runtime.Serialization.EnumMember(Value = "Ready")]
        Ready,
        [System.Runtime.Serialization.EnumMember(Value = "Running")]
        Running,
        [System.Runtime.Serialization.EnumMember(Value = "Paused")]
        Paused,
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown
    }
    internal static class IngressStateEnumExtension
    {
        internal static string ToSerializedValue(this IngressState? value)
        {
            return value == null ? null : ((IngressState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this IngressState value)
        {
            switch( value )
            {
                case IngressState.Disabled:
                    return "Disabled";
                case IngressState.Ready:
                    return "Ready";
                case IngressState.Running:
                    return "Running";
                case IngressState.Paused:
                    return "Paused";
                case IngressState.Unknown:
                    return "Unknown";
            }
            return null;
        }

        internal static IngressState? ParseIngressState(this string value)
        {
            switch( value )
            {
                case "Disabled":
                    return IngressState.Disabled;
                case "Ready":
                    return IngressState.Ready;
                case "Running":
                    return IngressState.Running;
                case "Paused":
                    return IngressState.Paused;
                case "Unknown":
                    return IngressState.Unknown;
            }
            return null;
        }
    }
}
