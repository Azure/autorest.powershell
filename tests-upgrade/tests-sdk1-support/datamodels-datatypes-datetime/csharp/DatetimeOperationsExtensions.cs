// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Sample
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DatetimeOperations.
    /// </summary>
    public static partial class DatetimeOperationsExtensions
    {
            /// <summary>
            /// Get null datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetNull(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get null datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetNullAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get invalid datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetInvalid(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetInvalidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get invalid datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetInvalidAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get overflow datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetOverflow(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetOverflowAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get overflow datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetOverflowAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetOverflowWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get underflow datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetUnderflow(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetUnderflowAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get underflow datetime value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetUnderflowAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUnderflowWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put max datetime value 9999-12-31T23:59:59.999Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutUtcMaxDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutUtcMaxDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put max datetime value 9999-12-31T23:59:59.999Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutUtcMaxDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutUtcMaxDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Put max datetime value 9999-12-31T23:59:59.9999999Z
            /// </summary>
            /// <remarks>
            /// This is against the recommendation that asks for 3 digits, but allow to
            /// test what happens in that scenario
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutUtcMaxDateTime7Digits(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutUtcMaxDateTime7DigitsAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put max datetime value 9999-12-31T23:59:59.9999999Z
            /// </summary>
            /// <remarks>
            /// This is against the recommendation that asks for 3 digits, but allow to
            /// test what happens in that scenario
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutUtcMaxDateTime7DigitsAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutUtcMaxDateTime7DigitsWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get max datetime value 9999-12-31t23:59:59.999z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetUtcLowercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetUtcLowercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value 9999-12-31t23:59:59.999z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetUtcLowercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUtcLowercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get max datetime value 9999-12-31T23:59:59.999Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetUtcUppercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetUtcUppercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value 9999-12-31T23:59:59.999Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetUtcUppercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUtcUppercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get max datetime value 9999-12-31T23:59:59.9999999Z
            /// </summary>
            /// <remarks>
            /// This is against the recommendation that asks for 3 digits, but allow to
            /// test what happens in that scenario
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetUtcUppercaseMaxDateTime7Digits(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetUtcUppercaseMaxDateTime7DigitsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value 9999-12-31T23:59:59.9999999Z
            /// </summary>
            /// <remarks>
            /// This is against the recommendation that asks for 3 digits, but allow to
            /// test what happens in that scenario
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetUtcUppercaseMaxDateTime7DigitsAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUtcUppercaseMaxDateTime7DigitsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put max datetime value with positive numoffset
            /// 9999-12-31t23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutLocalPositiveOffsetMaxDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutLocalPositiveOffsetMaxDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put max datetime value with positive numoffset
            /// 9999-12-31t23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutLocalPositiveOffsetMaxDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutLocalPositiveOffsetMaxDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31t23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalPositiveOffsetLowercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalPositiveOffsetLowercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31t23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalPositiveOffsetLowercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalPositiveOffsetLowercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31T23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalPositiveOffsetUppercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalPositiveOffsetUppercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31T23:59:59.999+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalPositiveOffsetUppercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalPositiveOffsetUppercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put max datetime value with positive numoffset
            /// 9999-12-31t23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutLocalNegativeOffsetMaxDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutLocalNegativeOffsetMaxDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put max datetime value with positive numoffset
            /// 9999-12-31t23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutLocalNegativeOffsetMaxDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutLocalNegativeOffsetMaxDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31T23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalNegativeOffsetUppercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalNegativeOffsetUppercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31T23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalNegativeOffsetUppercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalNegativeOffsetUppercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31t23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalNegativeOffsetLowercaseMaxDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalNegativeOffsetLowercaseMaxDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get max datetime value with positive num offset
            /// 9999-12-31t23:59:59.999-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalNegativeOffsetLowercaseMaxDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalNegativeOffsetLowercaseMaxDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutUtcMinDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutUtcMinDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutUtcMinDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutUtcMinDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetUtcMinDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetUtcMinDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00Z
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetUtcMinDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUtcMinDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutLocalPositiveOffsetMinDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutLocalPositiveOffsetMinDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutLocalPositiveOffsetMinDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutLocalPositiveOffsetMinDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalPositiveOffsetMinDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalPositiveOffsetMinDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00+14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalPositiveOffsetMinDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalPositiveOffsetMinDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            public static void PutLocalNegativeOffsetMinDateTime(this IDatetimeOperations operations, System.DateTime datetimeBody)
            {
                ((IDatetimeOperations)operations).PutLocalNegativeOffsetMinDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put min datetime value 0001-01-01T00:00:00-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datetimeBody'>
            /// datetime body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutLocalNegativeOffsetMinDateTimeAsync(this IDatetimeOperations operations, System.DateTime datetimeBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.PutLocalNegativeOffsetMinDateTimeWithHttpMessagesAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalNegativeOffsetMinDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalNegativeOffsetMinDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00-14:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalNegativeOffsetMinDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalNegativeOffsetMinDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.DateTime? GetLocalNoOffsetMinDateTime(this IDatetimeOperations operations)
            {
                return ((IDatetimeOperations)operations).GetLocalNoOffsetMinDateTimeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get min datetime value 0001-01-01T00:00:00
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.DateTime?> GetLocalNoOffsetMinDateTimeAsync(this IDatetimeOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLocalNoOffsetMinDateTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
