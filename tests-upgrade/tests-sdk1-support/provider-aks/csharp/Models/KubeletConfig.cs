// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Models
{
    using System.Linq;

    /// <summary>
    /// Kubelet configurations of agent nodes.
    /// </summary>
    /// <remarks>
    /// See [AKS custom node
    /// configuration](https://learn.microsoft.com/azure/aks/custom-node-configuration)
    /// for more details.
    /// </remarks>
    public partial class KubeletConfig
    {
        /// <summary>
        /// Initializes a new instance of the KubeletConfig class.
        /// </summary>
        public KubeletConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KubeletConfig class.
        /// </summary>
        /// <param name="cpuManagerPolicy">The CPU Manager policy to
        /// use.</param>
        /// <param name="cpuCfsQuota">If CPU CFS quota enforcement is enabled
        /// for containers that specify CPU limits.</param>
        /// <param name="cpuCfsQuotaPeriod">The CPU CFS quota period
        /// value.</param>
        /// <param name="imageGcHighThreshold">The percent of disk usage after
        /// which image garbage collection is always run.</param>
        /// <param name="imageGcLowThreshold">The percent of disk usage before
        /// which image garbage collection is never run.</param>
        /// <param name="topologyManagerPolicy">The Topology Manager policy to
        /// use.</param>
        /// <param name="allowedUnsafeSysctls">Allowed list of unsafe sysctls
        /// or unsafe sysctl patterns (ending in `*`).</param>
        /// <param name="failSwapOn">If set to true it will make the Kubelet
        /// fail to start if swap is enabled on the node.</param>
        /// <param name="containerLogMaxSizeMb">The maximum size (e.g. 10Mi) of
        /// container log file before it is rotated.</param>
        /// <param name="containerLogMaxFiles">The maximum number of container
        /// log files that can be present for a container. The number must be ≥
        /// 2.</param>
        /// <param name="podMaxPids">The maximum number of processes per
        /// pod.</param>
        public KubeletConfig(string cpuManagerPolicy = default(string), bool? cpuCfsQuota = default(bool?), string cpuCfsQuotaPeriod = default(string), int? imageGcHighThreshold = default(int?), int? imageGcLowThreshold = default(int?), string topologyManagerPolicy = default(string), System.Collections.Generic.IList<string> allowedUnsafeSysctls = default(System.Collections.Generic.IList<string>), bool? failSwapOn = default(bool?), int? containerLogMaxSizeMb = default(int?), int? containerLogMaxFiles = default(int?), int? podMaxPids = default(int?))
        {
            this.CpuManagerPolicy = cpuManagerPolicy;
            this.CpuCfsQuota = cpuCfsQuota;
            this.CpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            this.ImageGcHighThreshold = imageGcHighThreshold;
            this.ImageGcLowThreshold = imageGcLowThreshold;
            this.TopologyManagerPolicy = topologyManagerPolicy;
            this.AllowedUnsafeSysctls = allowedUnsafeSysctls;
            this.FailSwapOn = failSwapOn;
            this.ContainerLogMaxSizeMb = containerLogMaxSizeMb;
            this.ContainerLogMaxFiles = containerLogMaxFiles;
            this.PodMaxPids = podMaxPids;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the CPU Manager policy to use.
        /// </summary>
        /// <remarks>
        /// The default is 'none'. See [Kubernetes CPU management
        /// policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies)
        /// for more information. Allowed values are 'none' and 'static'.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuManagerPolicy")]
        public string CpuManagerPolicy { get; set; }

        /// <summary>
        /// Gets or sets if CPU CFS quota enforcement is enabled for containers
        /// that specify CPU limits.
        /// </summary>
        /// <remarks>
        /// The default is true.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuCfsQuota")]
        public bool? CpuCfsQuota { get; set; }

        /// <summary>
        /// Gets or sets the CPU CFS quota period value.
        /// </summary>
        /// <remarks>
        /// The default is '100ms.' Valid values are a sequence of decimal
        /// numbers with an optional fraction and a unit suffix. For example:
        /// '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm',
        /// and 'h'.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cpuCfsQuotaPeriod")]
        public string CpuCfsQuotaPeriod { get; set; }

        /// <summary>
        /// Gets or sets the percent of disk usage after which image garbage
        /// collection is always run.
        /// </summary>
        /// <remarks>
        /// To disable image garbage collection, set to 100. The default is 85%
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageGcHighThreshold")]
        public int? ImageGcHighThreshold { get; set; }

        /// <summary>
        /// Gets or sets the percent of disk usage before which image garbage
        /// collection is never run.
        /// </summary>
        /// <remarks>
        /// This cannot be set higher than imageGcHighThreshold. The default is
        /// 80%
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageGcLowThreshold")]
        public int? ImageGcLowThreshold { get; set; }

        /// <summary>
        /// Gets or sets the Topology Manager policy to use.
        /// </summary>
        /// <remarks>
        /// For more information see [Kubernetes Topology
        /// Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager).
        /// The default is 'none'. Allowed values are 'none', 'best-effort',
        /// 'restricted', and 'single-numa-node'.
        /// </remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName = "topologyManagerPolicy")]
        public string TopologyManagerPolicy { get; set; }

        /// <summary>
        /// Gets or sets allowed list of unsafe sysctls or unsafe sysctl
        /// patterns (ending in `*`).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowedUnsafeSysctls")]
        public System.Collections.Generic.IList<string> AllowedUnsafeSysctls { get; set; }

        /// <summary>
        /// Gets or sets if set to true it will make the Kubelet fail to start
        /// if swap is enabled on the node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failSwapOn")]
        public bool? FailSwapOn { get; set; }

        /// <summary>
        /// Gets or sets the maximum size (e.g. 10Mi) of container log file
        /// before it is rotated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerLogMaxSizeMB")]
        public int? ContainerLogMaxSizeMb { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of container log files that can be
        /// present for a container. The number must be ≥ 2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerLogMaxFiles")]
        public int? ContainerLogMaxFiles { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of processes per pod.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "podMaxPids")]
        public int? PodMaxPids { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ContainerLogMaxFiles != null)
            {
                if (this.ContainerLogMaxFiles < 2)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ContainerLogMaxFiles", 2);
                }
            }
        }
    }
}
