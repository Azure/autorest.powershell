// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a encoded task step.
    /// </summary>
    [Newtonsoft.Json.JsonObject("EncodedTask")]
    public partial class EncodedTaskStep : TaskStepProperties
    {
        /// <summary>
        /// Initializes a new instance of the EncodedTaskStep class.
        /// </summary>
        public EncodedTaskStep()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncodedTaskStep class.
        /// </summary>
        /// <param name="encodedTaskContent">Base64 encoded value of the
        /// template/definition file content.</param>
        /// <param name="baseImageDependencies">List of base image dependencies
        /// for a step.</param>
        /// <param name="contextPath">The URL(absolute or relative) of the
        /// source context for the task step.</param>
        /// <param name="contextAccessToken">The token (git PAT or SAS token of
        /// storage account blob) associated with the context for a
        /// step.</param>
        /// <param name="encodedValuesContent">Base64 encoded value of the
        /// parameters/values file content.</param>
        /// <param name="values">The collection of overridable values that can
        /// be passed when running a task.</param>
        public EncodedTaskStep(string encodedTaskContent, System.Collections.Generic.IList<BaseImageDependency> baseImageDependencies = default(System.Collections.Generic.IList<BaseImageDependency>), string contextPath = default(string), string contextAccessToken = default(string), string encodedValuesContent = default(string), System.Collections.Generic.IList<SetValue> values = default(System.Collections.Generic.IList<SetValue>))
            : base(baseImageDependencies, contextPath, contextAccessToken)
        {
            this.EncodedTaskContent = encodedTaskContent;
            this.EncodedValuesContent = encodedValuesContent;
            this.Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets base64 encoded value of the template/definition file
        /// content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodedTaskContent")]
        public string EncodedTaskContent { get; set; }

        /// <summary>
        /// Gets or sets base64 encoded value of the parameters/values file
        /// content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodedValuesContent")]
        public string EncodedValuesContent { get; set; }

        /// <summary>
        /// Gets or sets the collection of overridable values that can be
        /// passed when running a task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<SetValue> Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.EncodedTaskContent == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EncodedTaskContent");
            }
            if (this.Values != null)
            {
                foreach (var element in this.Values)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
