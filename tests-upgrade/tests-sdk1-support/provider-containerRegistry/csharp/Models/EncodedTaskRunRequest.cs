// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using System.Linq;

    /// <summary>
    /// The parameters for a quick task run request.
    /// </summary>
    [Newtonsoft.Json.JsonObject("EncodedTaskRunRequest")]
    public partial class EncodedTaskRunRequest : RunRequest
    {
        /// <summary>
        /// Initializes a new instance of the EncodedTaskRunRequest class.
        /// </summary>
        public EncodedTaskRunRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncodedTaskRunRequest class.
        /// </summary>
        /// <param name="encodedTaskContent">Base64 encoded value of the
        /// template/definition file content.</param>
        /// <param name="platform">The platform properties against which the
        /// run has to happen.</param>
        /// <param name="isArchiveEnabled">The value that indicates whether
        /// archiving is enabled for the run or not.</param>
        /// <param name="encodedValuesContent">Base64 encoded value of the
        /// parameters/values file content.</param>
        /// <param name="values">The collection of overridable values that can
        /// be passed when running a task.</param>
        /// <param name="timeout">Run timeout in seconds.</param>
        /// <param name="agentConfiguration">The machine configuration of the
        /// run agent.</param>
        /// <param name="sourceLocation">The URL(absolute or relative) of the
        /// source context. It can be an URL to a tar or git repository.
        /// If it is relative URL, the relative path should be obtained from
        /// calling listBuildSourceUploadUrl API.</param>
        /// <param name="credentials">The properties that describes a set of
        /// credentials that will be used when this run is invoked.</param>
        public EncodedTaskRunRequest(string encodedTaskContent, PlatformProperties platform, bool? isArchiveEnabled = default(bool?), string encodedValuesContent = default(string), System.Collections.Generic.IList<SetValue> values = default(System.Collections.Generic.IList<SetValue>), int? timeout = default(int?), AgentProperties agentConfiguration = default(AgentProperties), string sourceLocation = default(string), Credentials credentials = default(Credentials))
            : base(isArchiveEnabled)
        {
            this.EncodedTaskContent = encodedTaskContent;
            this.EncodedValuesContent = encodedValuesContent;
            this.Values = values;
            this.Timeout = timeout;
            this.Platform = platform;
            this.AgentConfiguration = agentConfiguration;
            this.SourceLocation = sourceLocation;
            this.Credentials = credentials;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets base64 encoded value of the template/definition file
        /// content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodedTaskContent")]
        public string EncodedTaskContent { get; set; }

        /// <summary>
        /// Gets or sets base64 encoded value of the parameters/values file
        /// content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encodedValuesContent")]
        public string EncodedValuesContent { get; set; }

        /// <summary>
        /// Gets or sets the collection of overridable values that can be
        /// passed when running a task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<SetValue> Values { get; set; }

        /// <summary>
        /// Gets or sets run timeout in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeout")]
        public int? Timeout { get; set; }

        /// <summary>
        /// Gets or sets the platform properties against which the run has to
        /// happen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "platform")]
        public PlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or sets the machine configuration of the run agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "agentConfiguration")]
        public AgentProperties AgentConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the URL(absolute or relative) of the source context.
        /// It can be an URL to a tar or git repository.
        /// If it is relative URL, the relative path should be obtained from
        /// calling listBuildSourceUploadUrl API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceLocation")]
        public string SourceLocation { get; set; }

        /// <summary>
        /// Gets or sets the properties that describes a set of credentials
        /// that will be used when this run is invoked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credentials")]
        public Credentials Credentials { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.EncodedTaskContent == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EncodedTaskContent");
            }
            if (this.Platform == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Platform");
            }
            if (this.Values != null)
            {
                foreach (var element in this.Values)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Timeout != null)
            {
                if (this.Timeout > 28800)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Timeout", 28800);
                }
                if (this.Timeout < 300)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Timeout", 300);
                }
            }
            if (this.Platform != null)
            {
                this.Platform.Validate();
            }
        }
    }
}
