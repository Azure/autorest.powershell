// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using System.Linq;

    /// <summary>
    /// An object that represents a webhook for a container registry.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Webhook : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Webhook class.
        /// </summary>
        public Webhook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Webhook class.
        /// </summary>
        /// <param name="location">The location of the resource. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="actions">The list of actions that trigger the webhook
        /// to post notifications.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="status">The status of the webhook at the time the
        /// operation was called. Possible values include: 'enabled',
        /// 'disabled'</param>
        /// <param name="scope">The scope of repositories where the event can
        /// be triggered. For example, 'foo:*' means events for all tags under
        /// repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo'
        /// is equivalent to 'foo:latest'. Empty means all events.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// webhook at the time the operation was called. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'</param>
        public Webhook(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string provisioningState = default(string), string status = default(string), string scope = default(string), System.Collections.Generic.IList<string> actions = default(System.Collections.Generic.IList<string>))
            : base(location, id, name, type, tags)
        {
            this.Status = status;
            this.Scope = scope;
            this.Actions = actions;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status of the webhook at the time the operation
        /// was called. Possible values include: 'enabled', 'disabled'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the scope of repositories where the event can be
        /// triggered. For example, 'foo:*' means events for all tags under
        /// repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo'
        /// is equivalent to 'foo:latest'. Empty means all events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the list of actions that trigger the webhook to post
        /// notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.actions")]
        public System.Collections.Generic.IList<string> Actions { get; set; }

        /// <summary>
        /// Gets the provisioning state of the webhook at the time the
        /// operation was called. Possible values include: 'Creating',
        /// 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
