// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerRegistry.Models
{
    using System.Linq;

    /// <summary>
    /// The parameters for creating a webhook.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class WebhookCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the WebhookCreateParameters class.
        /// </summary>
        public WebhookCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebhookCreateParameters class.
        /// </summary>
        /// <param name="location">The location of the webhook. This cannot be
        /// changed after the resource is created.</param>
        /// <param name="serviceUri">The service URI for the webhook to post
        /// notifications.</param>
        /// <param name="actions">The list of actions that trigger the webhook
        /// to post notifications.</param>
        /// <param name="tags">The tags for the webhook.</param>
        /// <param name="customHeaders">Custom headers that will be added to
        /// the webhook notifications.</param>
        /// <param name="status">The status of the webhook at the time the
        /// operation was called. Possible values include: 'enabled',
        /// 'disabled'</param>
        /// <param name="scope">The scope of repositories where the event can
        /// be triggered. For example, 'foo:*' means events for all tags under
        /// repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo'
        /// is equivalent to 'foo:latest'. Empty means all events.</param>
        public WebhookCreateParameters(string location, string serviceUri, System.Collections.Generic.IList<string> actions, System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> customHeaders = default(System.Collections.Generic.IDictionary<string, string>), string status = default(string), string scope = default(string))
        {
            this.Tags = tags;
            this.Location = location;
            this.ServiceUri = serviceUri;
            this.CustomHeaders = customHeaders;
            this.Status = status;
            this.Scope = scope;
            this.Actions = actions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the tags for the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the location of the webhook. This cannot be changed
        /// after the resource is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the service URI for the webhook to post notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceUri")]
        public string ServiceUri { get; set; }

        /// <summary>
        /// Gets or sets custom headers that will be added to the webhook
        /// notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customHeaders")]
        public System.Collections.Generic.IDictionary<string, string> CustomHeaders { get; set; }

        /// <summary>
        /// Gets or sets the status of the webhook at the time the operation
        /// was called. Possible values include: 'enabled', 'disabled'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the scope of repositories where the event can be
        /// triggered. For example, 'foo:*' means events for all tags under
        /// repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo'
        /// is equivalent to 'foo:latest'. Empty means all events.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the list of actions that trigger the webhook to post
        /// notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.actions")]
        public System.Collections.Generic.IList<string> Actions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }
            if (this.ServiceUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServiceUri");
            }
            if (this.Actions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Actions");
            }
        }
    }
}
